<?xml version="1.0"?>
<ruleset name="BrandEmbassyCodingStandard">

    <arg name="extensions" value="php"/>
    <arg name="tab-width" value="4"/>
    <arg name="colors"/>

    <!-- Ignore warnings, show progress of the run and show sniff names -->
    <arg value="nps"/>

    <!-- Import PSR-2 coding standard (base) -->
    <rule ref="PSR2">
        <!-- Checked by BrandEmbassyCodingStandard.NamingConvention.CamelCapsFunctionName -->
        <exclude name="PSR1.Methods.CamelCapsMethodName.NotCamelCaps"/>

        <!-- Checked by SlevomatCodingStandard.Namespaces.UseSpacing -->
        <exclude name="PSR2.Namespaces.UseDeclaration.SpaceAfterLastUse"/>

        <!-- Allow methods to start with underscore -->
        <exclude name="PSR2.Methods.MethodDeclaration.Underscore"/>
    </rule>

    <!-- Import PSR-12 coding standard (base) -->
    <rule ref="PSR12"/>

    <!-- Require array element indentation with 4 spaces -->
    <rule ref="Generic.Arrays.ArrayIndent"/>

    <!-- Forbid `array(...)` -->
    <rule ref="Generic.Arrays.DisallowLongArraySyntax"/>

    <!-- Forbid duplicate classes -->
    <rule ref="Generic.Classes.DuplicateClassName"/>

    <!-- Forbid empty statements -->
    <rule ref="Generic.CodeAnalysis.EmptyStatement">
        <!-- But allow empty catch -->
        <exclude name="Generic.CodeAnalysis.EmptyStatement.DetectedCatch"/>
    </rule>

    <!-- Forbid using of functions in for test expression -->
    <rule ref="Generic.CodeAnalysis.ForLoopWithTestFunctionCall"/>

    <!-- Forbid one and the same incrementer in an outer and an inner loop -->
    <rule ref="Generic.CodeAnalysis.JumbledIncrementer"/>

    <!-- Forbid if (true) and if (false) -->
    <rule ref="Generic.CodeAnalysis.UnconditionalIfStatement"/>

    <!-- Forbid final methods in final classes -->
    <rule ref="Generic.CodeAnalysis.UnnecessaryFinalModifier"/>

    <!-- Forbid unused function parameters -->
    <rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>

    <!-- Forbid overrides which only call their parent -->
    <rule ref="Generic.CodeAnalysis.UselessOverridingMethod"/>

    <!-- Warn about todos -->
    <rule ref="Generic.Commenting.Todo">
        <type>warning</type>
    </rule>

    <!-- Forbid inline HTML in PHP code -->
    <rule ref="Generic.Files.InlineHTML"/>

    <!-- Require file ends with a new line -->
    <rule ref="Generic.Files.EndFileNewline"/>

    <!-- Forbid more than one object structure (class, interface, trait) in a file -->
    <rule ref="Generic.Files.OneObjectStructurePerFile"/>

    <!-- Forbid space after cast -->
    <rule ref="Generic.Formatting.NoSpaceAfterCast"/>

    <!-- Forbid any content before opening tag -->
    <rule ref="Generic.PHP.CharacterBeforePHPOpeningTag"/>

    <!-- Forbid deprecated functions -->
    <rule ref="Generic.PHP.DeprecatedFunctions"/>

    <!-- Forbid alias functions, i.e. `sizeof()`, `delete()` -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="chop" value="rtrim"/>
                <element key="close" value="closedir"/>
                <element key="compact" value="null"/>
                <element key="delete" value="unset"/>
                <element key="doubleval" value="floatval"/>
                <element key="extract" value="null"/>
                <element key="fputs" value="fwrite"/>
                <element key="ini_alter" value="ini_set"/>
                <element key="is_double" value="is_float"/>
                <element key="is_integer" value="is_int"/>
                <element key="is_long" value="is_int"/>
                <element key="is_null" value="null"/>
                <element key="is_real" value="is_float"/>
                <element key="is_writeable" value="is_writable"/>
                <element key="join" value="implode"/>
                <element key="key_exists" value="array_key_exists"/>
                <element key="pos" value="current"/>
                <element key="settype" value="null"/>
                <element key="show_source" value="highlight_file"/>
                <element key="sizeof" value="count"/>
                <element key="strchr" value="strstr"/>
                <element key="var_dump" value="null"/>
                <element key="dump" value="null"/>
                <element key="empty" value="null"/>
            </property>
        </properties>
    </rule>

    <!-- Require true, false and null are lowercase -->
    <rule ref="Generic.PHP.LowerCaseConstant"/>

    <!-- Require php types to be lowercase -->
    <rule ref="Generic.PHP.LowerCaseType"/>

    <!-- Forbid silencing errors -->
    <rule ref="Generic.PHP.NoSilencedErrors"/>

    <!-- Forbid php_sapi_name() instead of PHP_SAPI constant -->
    <rule ref="Generic.PHP.SAPIUsage"/>

    <!-- Forbid useless inline string concatenation -->
    <rule ref="Generic.Strings.UnnecessaryStringConcat">
        <!-- But multi-line is useful for readability -->
        <properties>
            <property name="allowMultiline" value="true"/>
        </properties>
    </rule>

    <!-- Forbid spaces inside function parentheses, but allow newlines for spacing -->
    <rule ref="Generic.WhiteSpace.ArbitraryParenthesesSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Forbid tabs for indentation -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!-- Require space after language constructs -->
    <rule ref="Generic.WhiteSpace.LanguageConstructSpacing"/>

    <!-- Require correct scope indent -->
    <rule ref="Generic.WhiteSpace.ScopeIndent"/>

    <!-- Forbid comments starting with # -->
    <rule ref="PEAR.Commenting.InlineComment"/>

    <!-- Checks for missing typehints -->
    <rule ref="SlevomatCodingStandard.TypeHints.TypeHintDeclaration">
        <properties>
            <property name="enableObjectTypeHint" value="false"/>
            <property name="traversableTypeHints" type="array">
                <element value="\Doctrine\Common\Collections\ArrayCollection"/>
                <element value="\Doctrine\Common\Collections\Collection"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid catching exceptions with Exception -->
    <rule ref="SlevomatCodingStandard.Exceptions.ReferenceThrowableOnly"/>

    <!-- Require strict types declaration and its format -->
    <rule ref="SlevomatCodingStandard.TypeHints.DeclareStrictTypes">
        <properties>
            <property name="newlinesCountBetweenOpenTagAndDeclare" value="0"/>
            <property name="newlinesCountAfterDeclare" value="2"/>
            <property name="spacesCountAroundEqualsSign" value="1"/>
        </properties>
    </rule>

    <!-- Forbid assignment in if, elseif and do-while -->
    <rule ref="SlevomatCodingStandard.ControlStructures.AssignmentInCondition"/>

    <!-- Forbid == and != -->
    <rule ref="SlevomatCodingStandard.Operators.DisallowEqualOperators"/>

    <!-- Requires short ternary operator ?: when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireShortTernaryOperator"/>

    <!-- Requires use of null coalesce operator when possible -->
    <rule ref="SlevomatCodingStandard.ControlStructures.RequireNullCoalesceOperator"/>

    <!-- Forbid dead code -->
    <rule ref="SlevomatCodingStandard.Classes.UnusedPrivateElements"/>

    <!-- Forbid unused use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
        <properties>
            <property name="searchAnnotations" type="boolean" value="true"/>
        </properties>
    </rule>

    <!-- Forbid useless uses of the same namespace -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace"/>

    <!-- Forbid useless unreachable catch blocks -->
    <rule ref="SlevomatCodingStandard.Exceptions.DeadCatch"/>

    <!-- Require comma after last element in multi-line array -->
    <rule ref="SlevomatCodingStandard.Arrays.TrailingArrayComma"/>

    <!-- Require language constructs without parentheses -->
    <rule ref="SlevomatCodingStandard.ControlStructures.LanguageConstructWithParentheses"/>

    <!-- Forbid yoda conditions -->
    <rule ref="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>

    <!-- Require use statements to be alphabetically sorted -->
    <rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses"/>

    <!-- Require empty newlines before and after uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseSpacing">
        <properties>
            <property name="linesCountAfterLastUse" value="1"/>
            <property name="linesCountBeforeFirstUse" value="1"/>
            <property name="linesCountBetweenUseTypes" value="0"/>
        </properties>
    </rule>

    <!-- Forbid use of longhand cast operators -->
    <rule ref="SlevomatCodingStandard.PHP.TypeCast"/>

    <!-- Require presence of constant visibility -->
    <rule ref="SlevomatCodingStandard.Classes.ClassConstantVisibility"/>

    <!-- Requires using combined assigment operators, eg +=, .= etc -->
    <rule ref="SlevomatCodingStandard.Operators.RequireCombinedAssignmentOperator"/>

    <!-- Enforces null type hint on last position in @var, @param and @return annotations -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullTypeHintOnLastPosition"/>

    <!-- Require space around colon in return types -->
    <rule ref="SlevomatCodingStandard.TypeHints.ReturnTypeHintSpacing"/>

    <!-- Require ? when default value is null -->
    <rule ref="SlevomatCodingStandard.TypeHints.NullableTypeForNullDefaultValue"/>

    <!-- Require one space between typehint and variable, require no space between nullability sign and typehint -->
    <rule ref="SlevomatCodingStandard.TypeHints.ParameterTypeHintSpacing"/>

    <!-- Forbid group uses -->
    <rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse"/>

    <!-- Forbid multiple use statements on same line -->
    <rule ref="SlevomatCodingStandard.Namespaces.MultipleUsesPerLine"/>

    <!-- Forbid using absolute class name references (except global ones) -->
    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="allowFallbackGlobalConstants" type="boolean" value="false"/>
            <property name="allowFallbackGlobalFunctions" type="boolean" value="false"/>
            <property name="allowFullyQualifiedGlobalClasses" type="boolean" value="false"/>
            <property name="allowFullyQualifiedGlobalConstants" type="boolean" value="false"/>
            <property name="allowFullyQualifiedGlobalFunctions" type="boolean" value="false"/>
            <property name="allowFullyQualifiedNameForCollidingClasses" type="boolean" value="true"/>
            <property name="allowFullyQualifiedNameForCollidingConstants" type="boolean" value="true"/>
            <property name="allowFullyQualifiedNameForCollidingFunctions" type="boolean" value="true"/>
            <property name="searchAnnotations" type="boolean" value="true"/>
        </properties>
    </rule>

    <!-- Forbid superfluous leading backslash in use statements -->
    <rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash"/>

    <!-- Forbid empty lines around type declarations -->
    <rule ref="SlevomatCodingStandard.Classes.EmptyLinesAroundClassBraces">
        <properties>
            <property name="linesCountAfterOpeningBrace" value="0"/>
            <property name="linesCountBeforeClosingBrace" value="0"/>
        </properties>
    </rule>

    <!-- Forbid useless annotations - Git and LICENCE file provide more accurate information -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenAnnotations">
        <properties>
            <property name="forbiddenAnnotations" type="array">
                <element value="@api"/>
                <element value="@author"/>
                <element value="@category"/>
                <element value="@copyright"/>
                <element value="@created"/>
                <element value="@license"/>
                <element value="@package"/>
                <element value="@since"/>
                <element value="@subpackage"/>
                <element value="@version"/>
                <element value="@throws"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid useless comments -->
    <rule ref="SlevomatCodingStandard.Commenting.ForbiddenComments">
        <properties>
            <property name="forbiddenCommentPatterns" type="array">
                <element value="~^(?:(?!private|protected|static)\S+ )?(?:con|de)structor\.\z~i"/>
                <element value="~^Created by \S+\.\z~i"/>
                <element value="~^\S+ [gs]etter\.\z~i"/>
            </property>
        </properties>
    </rule>

    <!-- Forbid empty comments -->
    <rule ref="SlevomatCodingStandard.Commenting.EmptyComment"/>

    <!-- Reports documentation comments containing only {@inheritDoc} annotation because inheritance is automatic -->
    <rule ref="SlevomatCodingStandard.Commenting.UselessInheritDocComment"/>

    <!-- Prohibits multiple traits separated by commas in one use statement -->
    <rule ref="SlevomatCodingStandard.Classes.TraitUseDeclaration"/>

    <!-- @TODO: conflict with method/field spacing -->
    <!-- Enforces configurable number of lines before first use, after last use and between two use statements -->
    <!--<rule ref="SlevomatCodingStandard.Classes.TraitUseSpacing">-->
        <!--<properties>-->
            <!--<property name="linesCountBeforeFirstUse" type="boolean" value="0"/>-->
            <!--<property name="linesCountAfterLastUse" type="boolean" value="1"/>-->
            <!--<property name="linesCountAfterLastUseWhenLastInClass" type="boolean" value="0"/>-->
        <!--</properties>-->
    <!--</rule>-->

    <!-- Looks for unused variables -->
    <rule ref="SlevomatCodingStandard.Variables.UnusedVariable">
        <properties>
            <property name="ignoreUnusedValuesWhenOnlyKeysAreUsedInForeach" type="bool" value="true"/>
        </properties>
    </rule>

    <!-- Looks for useless parameter default value -->
    <rule ref="SlevomatCodingStandard.Functions.UnusedInheritedVariablePassedToClosure"/>

    <!-- Looks for use alias that is same as unqualified name -->
    <rule ref="SlevomatCodingStandard.Namespaces.UselessAlias"/>

    <!-- Prohibits multiple traits separated by commas in one use statement -->
    <rule ref="SlevomatCodingStandard.Functions.UselessParameterDefaultValue"/>

    <!-- Disallows implicit array creation -->
    <rule ref="SlevomatCodingStandard.Arrays.DisallowImplicitArrayCreation"/>

    <!-- Forbid spacing after and before array brackets -->
    <rule ref="Squiz.Arrays.ArrayBracketSpacing"/>

    <!-- Force array declaration structure -->
    <rule ref="Squiz.Arrays.ArrayDeclaration">
        <!-- Allow multiple values on a single line -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.SingleLineNotAllowed"/>
        <!-- Disable key aligning -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.KeyNotAligned"/>
        <!-- Disable alignment of braces -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.CloseBraceNotAligned"/>
        <!-- Disable alignment of values with opening brace -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.ValueNotAligned"/>
        <!-- Checked by SlevomatCodingStandard.Arrays.TrailingArrayComma.MissingTrailingComma -->
        <exclude name="Squiz.Arrays.ArrayDeclaration.NoCommaAfterLast"/>
    </rule>

    <!-- Forbid class being in a file with different name -->
    <rule ref="Squiz.Classes.ClassFileName"/>

    <!-- Force class keyword to be lowercase -->
    <rule ref="Squiz.Classes.LowercaseClassKeywords"/>

    <!-- Force `self::` for self-reference, force lower-case self, forbid spaces around `::` -->
    <rule ref="Squiz.Classes.SelfMemberReference"/>

    <!-- Ensures classes are in camel caps, and the first letter is capitalised -->
    <rule ref="Squiz.Classes.ValidClassName"/>

    <!-- Force phpDoc alignment -->
    <rule ref="Squiz.Commenting.DocCommentAlignment">
        <!-- Allow extra spaces after star, i.e. for indented annotations -->
        <exclude name="Squiz.Commenting.DocCommentAlignment.SpaceAfterStar"/>
    </rule>

    <!-- Forbid empty catch without comment -->
    <rule ref="Squiz.Commenting.EmptyCatchComment"/>

    <!-- Force rules for inline comments -->
    <rule ref="Squiz.Commenting.InlineComment">
        <!-- Allow inline phpDoc comments -->
        <exclude name="Squiz.Commenting.InlineComment.DocBlock"/>
        <!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.InlineComment.NotCapital"/>
        <!-- Comments don't have to be sentences -->
        <exclude name="Squiz.Commenting.InlineComment.InvalidEndChar"/>
    </rule>

    <!-- Force rules for variable comments -->
    <rule ref="Squiz.Commenting.VariableComment">
        <!-- Allow short versions of scalar types (i.e. int instead of integer) -->
        <exclude name="Squiz.Commenting.VariableComment.IncorrectVarType"/>
        <!-- Checked by SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingPropertyTypeHint -->
        <exclude name="Squiz.Commenting.VariableComment.Missing"/>
    </rule>

    <!-- Force rules for function argument spacing -->
    <rule ref="Squiz.Functions.FunctionDeclarationArgumentSpacing">
        <properties>
            <property name="equalsSpacing" value="1"/>
        </properties>
    </rule>

    <!-- Forbid global functions -->
    <rule ref="Squiz.Functions.GlobalFunction"/>

    <!-- Force function keyword to be lowercase -->
    <rule ref="Squiz.Functions.LowercaseFunctionKeywords"/>

    <!-- Force function declarations to be defined correctly -->
    <rule ref="Squiz.Functions.MultiLineFunctionDeclaration"/>

    <!-- Forbid `AND` and `OR`, require `&&` and `||` -->
    <rule ref="Squiz.Operators.ValidLogicalOperators"/>

    <!-- Warn about commented out code -->
    <rule ref="Squiz.PHP.CommentedOutCode"/>

    <!-- Forbid `global` -->
    <rule ref="Squiz.PHP.GlobalKeyword"/>

    <!-- Forbid functions inside functions -->
    <rule ref="Squiz.PHP.InnerFunctions"/>

    <!-- Require PHP function calls in lowercase -->
    <rule ref="Squiz.PHP.LowercasePHPFunctions"/>

    <!-- Forbid dead code -->
    <rule ref="Squiz.PHP.NonExecutableCode"/>

    <!-- Forbid `$this` inside static function -->
    <rule ref="Squiz.Scope.StaticThisUsage"/>

    <!-- Force whitespace before and after concatenation -->
    <rule ref="Squiz.Strings.ConcatenationSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Forbid strings in `"` unless necessary -->
    <rule ref="Squiz.Strings.DoubleQuoteUsage"/>
    <rule ref="Squiz.Strings.DoubleQuoteUsage.ContainsVar">
        <message>Variable "%s" not allowed in double quoted string; use sprintf() or concatenation instead</message>
    </rule>

    <!-- Forbid blank line after function opening brace -->
    <rule ref="Squiz.WhiteSpace.FunctionOpeningBraceSpace"/>

    <!-- Force correct function spacing -->
    <rule ref="Squiz.WhiteSpace.FunctionSpacing">
        <properties>
            <property name="spacing" value="2"/>
            <property name="spacingBeforeFirst" value="0"/>
            <property name="spacingAfterLast" value="0"/>
        </properties>
    </rule>

    <!-- Force spacing around member variables -->
    <rule ref="Squiz.WhiteSpace.MemberVarSpacing">
        <properties>
            <property name="spacing" value="1"/>
            <property name="spacingBeforeFirst" value="0"/>
        </properties>
    </rule>

    <!-- Forbid spaces around `->` operator -->
    <rule ref="Squiz.WhiteSpace.ObjectOperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Force space around operators -->
    <rule ref="Squiz.WhiteSpace.OperatorSpacing">
        <properties>
            <property name="ignoreNewlines" value="true"/>
        </properties>
    </rule>

    <!-- Forbid spaces before semicolon `;` -->
    <rule ref="Squiz.WhiteSpace.SemicolonSpacing"/>

    <!-- Forbid superfluous whitespaces -->
    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace">
        <properties>
            <!-- turned on by PSR2 -> turning back off -->
            <property name="ignoreBlankLines" value="false"/>
        </properties>
    </rule>

    <rule ref="Squiz.WhiteSpace.SuperfluousWhitespace.EmptyLines">
        <!-- turned off by PSR2 -> turning back on -->
        <severity>5</severity>
    </rule>

    <!-- Checks for missing typehints -->
    <rule ref="BrandEmbassyCodingStandard.TypeHints.TypeHintDeclaration">
        <properties>
            <property name="usefulAnnotations" type="array">
                <element value="@dataProvider"/>
                <element value="@runInSeparateProcess"/>
                <element value="@deprecated"/>
            </property>
        </properties>
    </rule>

    <!-- Require camelCase function names -->
    <rule ref="BrandEmbassyCodingStandard.NamingConvention.CamelCapsFunctionName"/>

    <!-- Force blank line before return statement -->
    <rule ref="BrandEmbassyCodingStandard.WhiteSpace.BlankLineBeforeReturn"/>

    <!-- Force blank line before throw statement -->
    <rule ref="BrandEmbassyCodingStandard.WhiteSpace.BlankLineBeforeThrow"/>

    <!-- Force rules for function phpDoc -->
    <rule ref="BrandEmbassyCodingStandard.Commenting.FunctionComment">
        <!-- Do not require `@return` -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.MissingReturn"/>
        <!-- Do not require comments for `@param` -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.MissingParamComment"/>
        <!-- Do not require `@param` for all parameters -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.MissingParamTag"/>
        <!-- Breaks when all params are not documented -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.ParamNameNoMatch"/>
        <!-- Does not support collections, i.e. `string[]` -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.IncorrectTypeHint"/>
        <!-- Doesn't respect inheritance -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.ScalarTypeHintMissing"/>
        <!-- Checked by SlevomatCodingStandard.TypeHints.TypeHintDeclaration.MissingParameterTypeHint -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.TypeHintMissing"/>
        <!-- Breaks when all params are not documented -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.InvalidTypeHint"/>
        <!-- Does not work properly with PHP 7 / short-named types -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.IncorrectParamVarName"/>
        <!-- Breaks with compound return types, i.e. `string|null` -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.InvalidReturnNotVoid"/>
        <!-- Comments don't have to be sentences -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.ParamCommentNotCapital"/>
        <!-- Comments don't have to be sentences -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.ParamCommentFullStop"/>
        <!-- Doc comment is not required for every method -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.Missing"/>
        <!-- Comment is not required for `@throws` tag -->
        <exclude name="BrandEmbassyCodingStandard.Commenting.FunctionComment.EmptyThrows"/>
    </rule>

</ruleset>
